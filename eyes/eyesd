#!/usr/bin/env python

import time,sqlite3,os,thread
import socket
try:
    import cec
except ImportError:
    print "cannot import CEC"


############################################################
#
# Section 1: polling the device
#
# Everything in this section is related to querying the TV
# to identify if it is on or off and act on that data
#
############################################################
cec.init()
device = cec.Device(0)
previous = None

def queryDevice():
    return device.is_on()

# Check if the device changed state.  Return True if there was a change, return False if no change.
def changedState(current):
    global previous
    if current == previous: return False
    return True

def openDatabase():
    global c
    global conn
    # Start and connect to Local Database
    conn = sqlite3.connect('stateChanges.db', detect_types=sqlite3.PARSE_DECLTYPES)
    # Convert all booleans to integers since SQlite3 doesn't support booleans natively
    sqlite3.register_adapter(bool, int)
    sqlite3.register_converter("BOOLEAN", lambda v: bool(int(v)))
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS state (metricsID INTEGER PRIMARY KEY, timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, state BOOLEAN NOT NULL)")

def writeStateToDatabase(state):
    openDatabase()
    c.execute("INSERT INTO state (state) VALUES (?)",(state,))
    conn.commit()
    conn.close()

def deviceHasChangedStates(state):
    writeStateToDatabase(state)
    openSocket(state)

def openSocket(state):
    HOST = 'ironman'    # The remote host
    PORT = 50007              # The same port as used by the server
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    s.send(b"State is "+str(state))
    data = s.recv(1024)
    s.close()
    print('Received', repr(data)) 


# Check for TV state changes
for i in range(1,10):
    state = queryDevice()
    if changedState(state):
        print "TV is "+str(state)
        thread.start_new_thread(deviceHasChangedStates,(state,))
    previous = state
    time.sleep(1)

############################################################
#
# Section 2: Connecting to the remote server
#
#
#
############################################################

